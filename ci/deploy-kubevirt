#!/bin/bash
# usage: deploy-kubevirt (minikube|minishift|oc_cluster) $KUBEVIRT_VERSION

set -ex

source $(dirname $(realpath $0))/defaults
source $(dirname $(realpath $0))/try-oc-login

if [ -z "${DEPLOY_TIMEOUT}" ]; then
	DEPLOY_TIMEOUT="240s"
fi

if [ -z "${DEFAULT_KUBEVIRT_VER}" ]; then
	# if no versionsrc available, DEFAULT_KUBEVIRT_VER will still be ""
	DEFAULT_KUBEVIRT_VER="$( $(dirname $(realpath $0))/extra/cat-kubevirt-release last )"
fi

_enable_software_emulation() {
  kubectl create configmap -n kubevirt kubevirt-config --from-literal debug.useEmulation=true || :
}

_enable_feature_gates() {
  local GATES=$1
  kubectl patch configmap -n kubevirt kubevirt-config -p "{\"data\":{\"feature-gates\": \"${GATES}\"}}" || :
}

_kubernetes() {
  local VER=$1

  kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/$VER/kubevirt-operator.yaml
  _enable_software_emulation
  if [ -n "${CI_CONFIG_FEATURE_GATES}" ]; then
    _enable_feature_gates ${CI_CONFIG_FEATURE_GATES}
  fi
  kubectl apply -f https://github.com/kubevirt/kubevirt/releases/download/$VER/kubevirt-cr.yaml
}

_origin() {
  local VER=$1

  _try_oc_login

  # Workaround for travis
  oc adm policy add-scc-to-group anyuid system:authenticated

  _kubernetes $VER
}

_${CDIST_ON[${1:-$DEFAULT_PLATFORM}]} ${2:-$DEFAULT_KUBEVIRT_VER}


WAIT_CONDITION=$( $(dirname $(realpath $0))/extra/get-wait-condition.py ${2:-$DEFAULT_KUBEVIRT_VER} )
(
  kubectl wait --timeout=${DEPLOY_TIMEOUT} --for=condition=${WAIT_CONDITION} -n kubevirt kv/kubevirt ;
) || {
  echo "Something went wrong"
  kubectl describe -n kubevirt kv/kubevirt
  kubectl describe pods -n kubevirt
  exit 1
}

# Give kvm some time to be announced
sleep 12

kubectl describe nodes
